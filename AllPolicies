package pipeline.AllPolicies

deny[msg] {
some i;
bugs = input.SONARQUBE.output[i].bugs;
project = input.SONARQUBE.output[i].project;
RRating = input.SONARQUBE.output[i].reliabilityRating;
SRating = input.SONARQUBE.output[i].securityRating;
bugsN = to_number(bugs)
contains(RRating,"E")
contains(SRating,"E")
bugsN >100
msg = sprintf("for Project '%v' bugs are '%v', reliability rating is '%v', Security rating is '%v'",[project,bugsN,RRating,SRating])
}

deny[msg] {
    some i
    jiraId = input.JIRA.output[i].jiraId;
    status = input.JIRA.output[i].status;
    priority = input.JIRA.output[i].priority;
    status != "Done";
    priority ="Highest"
    msg = sprintf("for jira id '%v' status is '%v' and priority is '%v' ",[jiraId,status,priority])

} 

deny[msg] {
some i
result = input.JENKINS.output[i].result;
buildId = input.JENKINS.output[i].buildId;

result != "SUCCESS";
msg = sprintf("for buildId '%v' result is '%v' ",[buildId,result])

}

deny[msg] {
some i
projectName = input.BAMBOO.output[i].data.projectName;
buildNumber = input.BAMBOO.output[i].data.buildNumber;
buildState  = input.BAMBOO.output[i].data.buildState;

buildState != "Successful";
msg = sprintf("for projectName '%v' and the buildNumber '%v' state of  buildstate is '%v' ",[projectName,buildNumber,buildState])

} 

deny[msg] {
some i
project = input.JFROG.output[i].value;
critical = input.JFROG.output[i].data.critical;
critical > 10;
msg = sprintf("for Project '%v' critical count is '%v' ",[project,critical])

}

score {
  input.AUTOPILOT.output[0].logScore < 70
}

deny["Overall Score less than 70"] {
  score
}
